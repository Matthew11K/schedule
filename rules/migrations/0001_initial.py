# Generated by Django 5.1.5 on 2025-07-10 16:09

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ConflictType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Название типа конфликта",
                        max_length=100,
                        unique=True,
                        verbose_name="Название типа",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Описание типа конфликта", verbose_name="Описание"
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Низкая"),
                            ("medium", "Средняя"),
                            ("high", "Высокая"),
                            ("critical", "Критическая"),
                        ],
                        default="medium",
                        help_text="Уровень серьёзности конфликта",
                        max_length=10,
                        verbose_name="Серьёзность",
                    ),
                ),
                (
                    "is_blocking",
                    models.BooleanField(
                        default=False,
                        help_text="Конфликт блокирует создание события",
                        verbose_name="Блокирующий",
                    ),
                ),
                (
                    "auto_resolve",
                    models.BooleanField(
                        default=False,
                        help_text="Система может автоматически разрешить этот тип конфликта",
                        verbose_name="Автоматическое разрешение",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Тип конфликта активен",
                        verbose_name="Активен",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Создан"),
                ),
            ],
            options={
                "verbose_name": "Тип конфликта",
                "verbose_name_plural": "Типы конфликтов",
                "ordering": ["severity", "name"],
            },
        ),
        migrations.CreateModel(
            name="Conflict",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "scheduled_event_id",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="ID запланированного события, с которым связан конфликт",
                        null=True,
                        verbose_name="ID запланированного события",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Подробное описание конфликта",
                        verbose_name="Описание конфликта",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("detected", "Обнаружен"),
                            ("acknowledged", "Принят к сведению"),
                            ("in_progress", "В процессе разрешения"),
                            ("resolved", "Разрешён"),
                            ("ignored", "Игнорирован"),
                        ],
                        default="detected",
                        help_text="Статус разрешения конфликта",
                        max_length=15,
                        verbose_name="Статус",
                    ),
                ),
                (
                    "detected_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Обнаружен"),
                ),
                (
                    "resolved_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Разрешён"
                    ),
                ),
                (
                    "resolution_notes",
                    models.TextField(
                        blank=True,
                        help_text="Примечания о том, как был разрешён конфликт",
                        verbose_name="Примечания к разрешению",
                    ),
                ),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Пользователь, разрешивший конфликт",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_conflicts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Разрешён пользователем",
                    ),
                ),
                (
                    "conflict_type",
                    models.ForeignKey(
                        help_text="Тип конфликта",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="conflicts",
                        to="rules.conflicttype",
                        verbose_name="Тип конфликта",
                    ),
                ),
            ],
            options={
                "verbose_name": "Конфликт",
                "verbose_name_plural": "Конфликты",
                "ordering": ["-detected_at", "conflict_type__severity"],
            },
        ),
        migrations.CreateModel(
            name="RoomAvailabilityRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="Дата начала действия правила",
                        verbose_name="Дата начала",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Дата окончания действия правила",
                        null=True,
                        verbose_name="Дата окончания",
                    ),
                ),
                (
                    "start_time",
                    models.TimeField(
                        help_text="Время начала доступности кабинета",
                        verbose_name="Время начала",
                    ),
                ),
                (
                    "end_time",
                    models.TimeField(
                        help_text="Время окончания доступности кабинета",
                        verbose_name="Время окончания",
                    ),
                ),
                (
                    "weekdays",
                    models.CharField(
                        help_text="Дни недели (0-6, через запятую). Пустое значение = все дни",
                        max_length=20,
                        verbose_name="Дни недели",
                    ),
                ),
                (
                    "is_available",
                    models.BooleanField(
                        default=True,
                        help_text="Кабинет доступен в указанное время",
                        verbose_name="Доступен",
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        blank=True,
                        help_text="Причина недоступности (если применимо)",
                        max_length=200,
                        verbose_name="Причина",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Правило активно",
                        verbose_name="Активно",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Создано"),
                ),
                (
                    "room",
                    models.ForeignKey(
                        help_text="Кабинет",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="availability_rules",
                        to="core.room",
                        verbose_name="Кабинет",
                    ),
                ),
            ],
            options={
                "verbose_name": "Правило доступности кабинета",
                "verbose_name_plural": "Правила доступности кабинетов",
                "ordering": ["room", "start_date", "start_time"],
            },
        ),
        migrations.CreateModel(
            name="TeacherAvailabilityPeriod",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "availability_type",
                    models.CharField(
                        choices=[
                            ("available", "Доступен"),
                            ("unavailable", "Недоступен"),
                            ("preferred", "Предпочтительное время"),
                            ("limited", "Ограниченная доступность"),
                        ],
                        help_text="Тип доступности учителя",
                        max_length=15,
                        verbose_name="Тип доступности",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="Дата начала периода", verbose_name="Дата начала"
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Дата окончания периода (если не указана, то постоянно)",
                        null=True,
                        verbose_name="Дата окончания",
                    ),
                ),
                (
                    "start_time",
                    models.TimeField(
                        help_text="Время начала доступности в день",
                        verbose_name="Время начала",
                    ),
                ),
                (
                    "end_time",
                    models.TimeField(
                        help_text="Время окончания доступности в день",
                        verbose_name="Время окончания",
                    ),
                ),
                (
                    "weekdays",
                    models.CharField(
                        help_text="Дни недели (0-6, через запятую). Пустое значение = все дни",
                        max_length=20,
                        verbose_name="Дни недели",
                    ),
                ),
                (
                    "max_hours_per_day",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Максимальное количество рабочих часов в день",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(24),
                        ],
                        verbose_name="Максимум часов в день",
                    ),
                ),
                (
                    "max_hours_per_week",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Максимальное количество рабочих часов в неделю",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(168),
                        ],
                        verbose_name="Максимум часов в неделю",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Дополнительные примечания",
                        verbose_name="Примечания",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Период активен", verbose_name="Активен"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Создан"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Обновлён"),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        help_text="Учитель",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="availability_periods",
                        to="core.teacher",
                        verbose_name="Учитель",
                    ),
                ),
            ],
            options={
                "verbose_name": "Период доступности учителя",
                "verbose_name_plural": "Периоды доступности учителей",
                "ordering": ["teacher", "start_date", "start_time"],
            },
        ),
        migrations.CreateModel(
            name="WorkingPeriodRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Название правила рабочего периода",
                        max_length=200,
                        verbose_name="Название правила",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Описание правила",
                        verbose_name="Описание",
                    ),
                ),
                (
                    "rule_type",
                    models.CharField(
                        choices=[
                            ("working_day", "Рабочий день"),
                            ("holiday", "Праздничный день"),
                            ("weekend", "Выходной день"),
                            ("vacation", "Каникулы"),
                            ("special", "Особый период"),
                        ],
                        help_text="Тип рабочего периода",
                        max_length=15,
                        verbose_name="Тип правила",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="Дата начала действия правила",
                        verbose_name="Дата начала",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Дата окончания действия правила (если не указана, то бессрочно)",
                        null=True,
                        verbose_name="Дата окончания",
                    ),
                ),
                (
                    "recurrence",
                    models.CharField(
                        choices=[
                            ("once", "Однократно"),
                            ("daily", "Ежедневно"),
                            ("weekly", "Еженедельно"),
                            ("monthly", "Ежемесячно"),
                            ("yearly", "Ежегодно"),
                        ],
                        default="once",
                        help_text="Тип повторения правила",
                        max_length=10,
                        verbose_name="Повторение",
                    ),
                ),
                (
                    "weekdays",
                    models.CharField(
                        blank=True,
                        help_text="Дни недели для еженедельного повторения (0-6, через запятую)",
                        max_length=20,
                        verbose_name="Дни недели",
                    ),
                ),
                (
                    "start_time",
                    models.TimeField(
                        blank=True,
                        help_text="Время начала рабочего дня (если применимо)",
                        null=True,
                        verbose_name="Время начала",
                    ),
                ),
                (
                    "end_time",
                    models.TimeField(
                        blank=True,
                        help_text="Время окончания рабочего дня (если применимо)",
                        null=True,
                        verbose_name="Время окончания",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Правило активно и применяется",
                        verbose_name="Активно",
                    ),
                ),
                (
                    "priority",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Приоритет правила (больше число = выше приоритет)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Приоритет",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Создано"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Обновлено"),
                ),
                (
                    "subsidiary",
                    models.ForeignKey(
                        blank=True,
                        help_text="Филиал (если не указан, то правило глобальное)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="working_period_rules",
                        to="core.subsidiary",
                        verbose_name="Филиал",
                    ),
                ),
            ],
            options={
                "verbose_name": "Правило рабочего периода",
                "verbose_name_plural": "Правила рабочих периодов",
                "ordering": ["-priority", "start_date", "name"],
            },
        ),
        migrations.CreateModel(
            name="TimeSlot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Название временного слота",
                        max_length=100,
                        verbose_name="Название слота",
                    ),
                ),
                (
                    "start_time",
                    models.TimeField(
                        help_text="Время начала слота", verbose_name="Время начала"
                    ),
                ),
                (
                    "end_time",
                    models.TimeField(
                        help_text="Время окончания слота",
                        verbose_name="Время окончания",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Порядок отображения слота",
                        verbose_name="Порядок",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Слот активен и может использоваться",
                        verbose_name="Активен",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Создан"),
                ),
                (
                    "subsidiary",
                    models.ForeignKey(
                        blank=True,
                        help_text="Филиал (если не указан, то слот глобальный)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="time_slots",
                        to="core.subsidiary",
                        verbose_name="Филиал",
                    ),
                ),
            ],
            options={
                "verbose_name": "Временной слот",
                "verbose_name_plural": "Временные слоты",
                "ordering": ["subsidiary", "order", "start_time"],
                "unique_together": {("start_time", "end_time", "subsidiary")},
            },
        ),
    ]
