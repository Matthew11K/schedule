# Generated by Django 5.1.5 on 2025-07-17 14:58

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("groups", "0001_initial"),
        ("learning", "0001_initial"),
        ("schedule", "0001_initial"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="student",
            name="group",
        ),
        migrations.AddField(
            model_name="student",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="Группы, в которых обучается студент",
                related_name="students",
                to="groups.group",
                verbose_name="Группы",
            ),
        ),
        migrations.CreateModel(
            name="Lesson",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        help_text="Порядковый номер урока в рамках курса группы",
                        verbose_name="Порядковый номер",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Название или тема урока",
                        max_length=300,
                        verbose_name="Название урока",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Подробное описание урока",
                        verbose_name="Описание",
                    ),
                ),
                (
                    "planned_date",
                    models.DateField(
                        blank=True,
                        help_text="Планируемая дата проведения урока",
                        null=True,
                        verbose_name="Планируемая дата",
                    ),
                ),
                (
                    "is_conducted",
                    models.BooleanField(
                        default=False,
                        help_text="Урок проведён (связан с Event)",
                        verbose_name="Проведён",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Создан"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Обновлён"),
                ),
                (
                    "event",
                    models.OneToOneField(
                        blank=True,
                        help_text="Связанное проведённое событие (когда урок состоялся)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="lesson",
                        to="schedule.event",
                        verbose_name="Проведённое событие",
                    ),
                ),
                (
                    "group_course",
                    models.ForeignKey(
                        help_text="Курс группы, к которому относится урок",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lessons",
                        to="groups.groupcourse",
                        verbose_name="Курс группы",
                    ),
                ),
            ],
            options={
                "verbose_name": "Урок",
                "verbose_name_plural": "Уроки",
                "ordering": ["group_course", "order"],
                "unique_together": {("group_course", "order")},
            },
        ),
        migrations.CreateModel(
            name="LessonTheme",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_primary",
                    models.BooleanField(
                        default=True,
                        help_text="Является ли тема основной для урока",
                        verbose_name="Основная тема",
                    ),
                ),
                (
                    "coverage_percentage",
                    models.PositiveIntegerField(
                        default=100,
                        help_text="Процент темы, который покрывается в этом уроке",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Процент покрытия",
                    ),
                ),
                (
                    "curriculum_node",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lesson_themes",
                        to="learning.curriculumnode",
                        verbose_name="Узел программы",
                    ),
                ),
                (
                    "lesson",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lesson_themes",
                        to="groups.lesson",
                        verbose_name="Урок",
                    ),
                ),
            ],
            options={
                "verbose_name": "Тема урока",
                "verbose_name_plural": "Темы уроков",
                "unique_together": {("lesson", "curriculum_node")},
            },
        ),
    ]
