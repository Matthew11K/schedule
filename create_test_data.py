#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
–ó–∞–ø—É—Å–∫: python manage.py shell < create_test_data.py
"""

import os
import sys
import django
from datetime import datetime, time, date
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'school_schedule.settings')
django.setup()

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π
from django.contrib.auth.models import User
from core.models import Subsidiary, Subject, Level, Course, Teacher, Room
from groups.models import Group, Student, GroupCourse  
from schedule.models import SchedulePlan, ScheduledEvent
from rules.models import ConflictType

def clear_data():
    """–û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    ScheduledEvent.objects.all().delete()
    GroupCourse.objects.all().delete()
    Student.objects.all().delete()
    Group.objects.all().delete()
    Course.objects.all().delete()
    Teacher.objects.all().delete()
    Room.objects.all().delete()
    Level.objects.all().delete()
    Subject.objects.all().delete()
    SchedulePlan.objects.all().delete()
    ConflictType.objects.all().delete()
    Subsidiary.objects.all().delete()
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")

def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # 1. –§–∏–ª–∏–∞–ª
    print("üè¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞...")
    subsidiary = Subsidiary.objects.create(
        name='–û—Å–Ω–æ–≤–Ω–∞—è —à–∫–æ–ª–∞',
        short_name='–û–®',
        address='—É–ª. –®–∫–æ–ª—å–Ω–∞—è, 1',
        phone='+7 (495) 123-45-67',
        email='info@school.edu'
    )
    
    # 2. –ü—Ä–µ–¥–º–µ—Ç—ã  
    print("üìö –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
    subjects_data = [
        ('–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–ú–∞—Ç', 'MATH'),
        ('–†—É—Å—Å–∫–∏–π —è–∑—ã–∫', '–†—É—Å', 'RUS'), 
        ('–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫', '–ê–Ω–≥–ª', 'ENG'),
        ('–§–∏–∑–∏–∫–∞', '–§–∏–∑', 'PHYS'),
        ('–•–∏–º–∏—è', '–•–∏–º', 'CHEM'),
        ('–ë–∏–æ–ª–æ–≥–∏—è', '–ë–∏–æ', 'BIO'),
        ('–ò—Å—Ç–æ—Ä–∏—è', '–ò—Å—Ç', 'HIST'),
        ('–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', '–ì–µ–æ', 'GEO'),
        ('–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞', '–§–ö', 'PE'),
        ('–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '–ò–Ω—Ñ', 'IT')
    ]
    
    subjects = []
    for name, short, code in subjects_data:
        subject = Subject.objects.create(
            name=name,
            short_name=short,
            code=code,
            subsidiary=subsidiary,
            description=f'–ü—Ä–µ–¥–º–µ—Ç {name}',
            is_active=True
        )
        subjects.append(subject)
    
    # 3. –°—Ç—É–ø–µ–Ω–∏
    print("üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—É–ø–µ–Ω–µ–π...")
    levels = []
    for i in range(5, 10):  # 5-9 –∫–ª–∞—Å—Å—ã
        level = Level.objects.create(
            name=f'{i} –∫–ª–∞—Å—Å',
            short_name=f'{i}–∫–ª',
            subsidiary=subsidiary,
            order=i,
            description=f'–°—Ç—É–ø–µ–Ω—å {i} –∫–ª–∞—Å—Å–∞',
            is_active=True
        )
        levels.append(level)
    
    # 4. –ö—É—Ä—Å—ã
    print("üìñ –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤...")
    courses = []
    for subject in subjects:
        for level in levels:
            # –ù–µ –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
            if (subject.code == 'PHYS' and level.order < 7) or \
               (subject.code == 'CHEM' and level.order < 8):
                continue
                
            course = Course.objects.create(
                subject=subject,
                level=level,
                name=f'{subject.name} {level.name}',
                description=f'–ö—É—Ä—Å {subject.name} –¥–ª—è {level.name}',
                duration_hours=random.randint(60, 120),
                weekly_hours=random.randint(2, 4),
                is_active=True
            )
            courses.append(course)
    
    # 5. –ö–∞–±–∏–Ω–µ—Ç—ã
    print("üè´ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–æ–≤...")
    rooms_data = [
        ('101', 30, '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'),
        ('102', 28, '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫'),
        ('103', 25, '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫'), 
        ('201', 32, '–§–∏–∑–∏–∫–∞'),
        ('202', 25, '–•–∏–º–∏—è'),
        ('203', 30, '–ë–∏–æ–ª–æ–≥–∏—è'),
        ('301', 35, '–ò—Å—Ç–æ—Ä–∏—è'),
        ('302', 32, '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è'),
        ('–°–ø–æ—Ä—Ç–∑–∞–ª', 50, '–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞'),
        ('–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å', 24, '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞'),
        ('–ê–∫—Ç–æ–≤—ã–π –∑–∞–ª', 100, None)
    ]
    
    rooms = []
    for name, capacity, subject_name in rooms_data:
        subject = None
        if subject_name:
            subject = next((s for s in subjects if s.name == subject_name), None)
            
        room = Room.objects.create(
            name=name,
            subsidiary=subsidiary,
            capacity=capacity,
            subject=subject,
            description=f'–ö–∞–±–∏–Ω–µ—Ç {name}',
            is_active=True
        )
        rooms.append(room)
    
    # 6. –£—á–∏—Ç–µ–ª—è
    print("üë©‚Äçüè´ –°–æ–∑–¥–∞–Ω–∏–µ —É—á–∏—Ç–µ–ª–µ–π...")
    teachers_data = [
        ('–ò–≤–∞–Ω–æ–≤–∞', '–ê–Ω–Ω–∞', '–ü–µ—Ç—Ä–æ–≤–Ω–∞', ['–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞']),
        ('–ü–µ—Ç—Ä–æ–≤', '–°–µ—Ä–≥–µ–π', '–ò–≤–∞–Ω–æ–≤–∏—á', ['–†—É—Å—Å–∫–∏–π —è–∑—ã–∫']),
        ('–°–∏–¥–æ—Ä–æ–≤–∞', '–ú–∞—Ä–∏—è', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞', ['–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫']),
        ('–ö–æ–∑–ª–æ–≤', '–î–º–∏—Ç—Ä–∏–π', '–ù–∏–∫–æ–ª–∞–µ–≤–∏—á', ['–§–∏–∑–∏–∫–∞']),
        ('–ú–æ—Ä–æ–∑–æ–≤–∞', '–ï–ª–µ–Ω–∞', '–í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞', ['–•–∏–º–∏—è', '–ë–∏–æ–ª–æ–≥–∏—è']),
        ('–í–æ–ª–∫–æ–≤', '–ê–ª–µ–∫—Å–µ–π', '–°–µ—Ä–≥–µ–µ–≤–∏—á', ['–ò—Å—Ç–æ—Ä–∏—è']),
        ('–°–æ–∫–æ–ª–æ–≤–∞', '–û–ª—å–≥–∞', '–î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞', ['–ì–µ–æ–≥—Ä–∞—Ñ–∏—è']),
        ('–ù–æ–≤–∏–∫–æ–≤', '–ò–≤–∞–Ω', '–ü–µ—Ç—Ä–æ–≤–∏—á', ['–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞']),
        ('–§–µ–¥–æ—Ä–æ–≤–∞', '–ù–∞—Ç–∞–ª—å—è', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞', ['–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞'])
    ]
    
    teachers = []
    for last_name, first_name, middle_name, subject_names in teachers_data:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = f'{last_name.lower()}.{first_name[0].lower()}'
        user = User.objects.create_user(
            username=username,
            first_name=first_name,
            last_name=last_name,
            email=f'{username}@school.edu',
            password='password123'
        )
        
        # –°–æ–∑–¥–∞–µ–º —É—á–∏—Ç–µ–ª—è
        teacher = Teacher.objects.create(
            user=user,
            subsidiary=subsidiary,
            employee_id=f'T{len(teachers) + 1:03d}',
            phone=f'+7 (495) {random.randint(100, 999)}-{random.randint(10, 99)}-{random.randint(10, 99)}',
            max_hours_per_week=random.randint(18, 25),
            is_active=True
        )
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
        for subject_name in subject_names:
            subject = next((s for s in subjects if s.name == subject_name), None)
            if subject:
                teacher.subjects.add(subject)
        
        teachers.append(teacher)
    
    # 7. –ì—Ä—É–ø–ø—ã
    print("üë• –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø...")
    groups = []
    for level in levels:
        for letter in ['–ê', '–ë']:
            group = Group.objects.create(
                name=f'{level.order}{letter}',
                subsidiary=subsidiary,
                level=level,
                max_students=random.randint(25, 30),
                start_date=date(2024, 9, 1),
                end_date=date(2025, 5, 31),
                description=f'–ö–ª–∞—Å—Å {level.order}{letter}',
                is_active=True
            )
            groups.append(group)
    
    # 8. –°—Ç—É–¥–µ–Ω—Ç—ã
    print("üë®‚Äçüéì –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...")
    first_names = ['–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ú–∞–∫—Å–∏–º', '–ê—Ä—Ç—ë–º', '–ú–∏—Ö–∞–∏–ª', '–î–∞–Ω–∏–∏–ª', '–î–º–∏—Ç—Ä–∏–π',
                   '–ê–Ω–Ω–∞', '–ú–∞—Ä–∏—è', '–ü–æ–ª–∏–Ω–∞', '–ï–ª–∏–∑–∞–≤–µ—Ç–∞', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–í–∏–∫—Ç–æ—Ä–∏—è']
    last_names = ['–ò–≤–∞–Ω–æ–≤', '–ü–µ—Ç—Ä–æ–≤', '–°–∏–¥–æ—Ä–æ–≤', '–ö–æ–∑–ª–æ–≤', '–ú–æ—Ä–æ–∑–æ–≤', '–í–æ–ª–∫–æ–≤',
                  '–°–º–∏—Ä–Ω–æ–≤', '–ö—É–∑–Ω–µ—Ü–æ–≤', '–ü–æ–ø–æ–≤', '–í–∞—Å–∏–ª—å–µ–≤', '–°–æ–∫–æ–ª–æ–≤', '–ú–∏—Ö–∞–π–ª–æ–≤']
    
    students = []
    for group in groups:
        num_students = random.randint(20, group.max_students)
        for i in range(num_students):
            first_name = random.choice(first_names)
            last_name = random.choice(last_names)
            
            student = Student.objects.create(
                student_id=f'S{group.level.order}{group.name[-1]}{i+1:02d}',
                first_name=first_name,
                last_name=last_name,
                date_of_birth=date(2010 + group.level.order, random.randint(1, 12), random.randint(1, 28)),
                enrollment_date=date(2024, 9, 1),
                is_active=True
            )
            student.groups.add(group)
            students.append(student)
    
    # 9. –ö—É—Ä—Å—ã –≥—Ä—É–ø–ø
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≥—Ä—É–ø–ø...")
    group_courses = []
    for group in groups:
        level_courses = [c for c in courses if c.level == group.level]
        for course in level_courses:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —É—á–∏—Ç–µ–ª—è
            suitable_teachers = [t for t in teachers if course.subject in t.subjects.all()]
            if suitable_teachers:
                teacher = random.choice(suitable_teachers)
                
                group_course = GroupCourse.objects.create(
                    group=group,
                    course=course,
                    teacher=teacher,
                    academic_hours=course.duration_hours,
                    start_date=date(2024, 9, 1),
                    end_date=date(2025, 5, 31),
                    is_active=True
                )
                group_courses.append(group_course)
    
    # 10. –ü–ª–∞–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    print("üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
    schedule_plan = SchedulePlan.objects.create(
        name='–û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 2024-2025',
        subsidiary=subsidiary,
        description='–û—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —É—á–µ–±–Ω—ã–π –≥–æ–¥',
        start_date=date(2024, 9, 1),
        end_date=date(2025, 5, 31),
        is_active=True
    )
    
    # 11. –¢–∏–ø—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    print("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...")
    conflict_types_data = [
        ('teacher_time_conflict', '–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ —É—á–∏—Ç–µ–ª—è', 'high'),
        ('room_double_booking', '–î–≤–æ–π–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞', 'high'),
        ('room_capacity_exceeded', '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–∞–±–∏–Ω–µ—Ç–∞', 'medium'),
        ('teacher_workload_exceeded', '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ —É—á–∏—Ç–µ–ª—è', 'low'),
    ]
    
    conflict_types = []
    for code, name, severity in conflict_types_data:
        conflict_type = ConflictType.objects.create(
            code=code,
            name=name,
            description=name,
            severity=severity,
            is_active=True
        )
        conflict_types.append(conflict_type)
    
    # 12. –°–æ–±—ã—Ç–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    print("üìÜ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
    weekdays = [0, 1, 2, 3, 4]  # –ü–Ω-–ü—Ç
    time_slots = [
        (time(8, 30), time(9, 15)),
        (time(9, 25), time(10, 10)),
        (time(10, 30), time(11, 15)),
        (time(11, 25), time(12, 10)),
        (time(12, 30), time(13, 15)),
        (time(13, 25), time(14, 10))
    ]
    
    events = []
    created_events = 0
    for group_course in group_courses[:30]:  # –ü–µ—Ä–≤—ã–µ 30 –∫—É—Ä—Å–æ–≤ –≥—Ä—É–ø–ø
        # –°–æ–∑–¥–∞–µ–º 2-3 —É—Ä–æ–∫–∞ –≤ –Ω–µ–¥–µ–ª—é
        lessons_per_week = min(3, group_course.course.weekly_hours)
        used_slots = set()
        
        for _ in range(lessons_per_week):
            # –ò–∑–±–µ–≥–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
            attempts = 0
            while attempts < 10:
                weekday = random.choice(weekdays)
                start_time, end_time = random.choice(time_slots)
                slot_key = (weekday, start_time)
                
                if slot_key not in used_slots:
                    used_slots.add(slot_key)
                    break
                attempts += 1
            
            if attempts >= 10:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–∞–±–∏–Ω–µ—Ç
            suitable_rooms = [r for r in rooms 
                            if r.subject == group_course.course.subject or r.subject is None]
            room = random.choice(suitable_rooms) if suitable_rooms else random.choice(rooms)
            
            event = ScheduledEvent.objects.create(
                schedule_plan=schedule_plan,
                group_course=group_course,
                weekday=weekday,
                start_time=start_time,
                end_time=end_time,
                room=room,
                duration_minutes=45,
                event_type='lesson',
                topic=f'–£—Ä–æ–∫ {group_course.course.subject.name}',
                is_active=True
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∏—Ç–µ–ª—è
            event.teachers.add(group_course.teacher)
            events.append(event)
            created_events += 1
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*50)
    print("‚úÖ –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–´!")
    print("="*50)
    print(f"üè¢ –§–∏–ª–∏–∞–ª–æ–≤: {Subsidiary.objects.count()}")
    print(f"üìö –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {Subject.objects.count()}")
    print(f"üéØ –°—Ç—É–ø–µ–Ω–µ–π: {Level.objects.count()}")
    print(f"üìñ –ö—É—Ä—Å–æ–≤: {Course.objects.count()}")
    print(f"üë©‚Äçüè´ –£—á–∏—Ç–µ–ª–µ–π: {Teacher.objects.count()}")
    print(f"üè´ –ö–∞–±–∏–Ω–µ—Ç–æ–≤: {Room.objects.count()}")
    print(f"üë• –ì—Ä—É–ø–ø: {Group.objects.count()}")
    print(f"üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {Student.objects.count()}")
    print(f"üìù –ö—É—Ä—Å–æ–≤ –≥—Ä—É–ø–ø: {GroupCourse.objects.count()}")
    print(f"üìÖ –ü–ª–∞–Ω–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {SchedulePlan.objects.count()}")
    print(f"üìÜ –°–æ–±—ã—Ç–∏–π: {ScheduledEvent.objects.count()}")
    print(f"‚ö†Ô∏è –¢–∏–ø–æ–≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: {ConflictType.objects.count()}")
    print("="*50)
    print("üéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É!")
    print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:8000/dashboard/")
    print("üîß –ê–¥–º–∏–Ω–∫–∞: http://localhost:8000/admin/ (admin/admin)")
    print("="*50)

if __name__ == "__main__":
    clear_data()
    create_test_data() 