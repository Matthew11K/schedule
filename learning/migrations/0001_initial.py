# Generated by Django 5.1.5 on 2025-07-10 16:06

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0001_initial"),
        ("groups", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Curriculum",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Название учебной программы",
                        max_length=300,
                        verbose_name="Название программы",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Описание программы и её целей",
                        verbose_name="Описание",
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        default="1.0",
                        help_text="Версия программы",
                        max_length=50,
                        verbose_name="Версия",
                    ),
                ),
                (
                    "total_hours",
                    models.PositiveIntegerField(
                        help_text="Общее количество академических часов",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                        verbose_name="Общее количество часов",
                    ),
                ),
                (
                    "difficulty_level",
                    models.CharField(
                        choices=[
                            ("beginner", "Начальный"),
                            ("intermediate", "Средний"),
                            ("advanced", "Продвинутый"),
                            ("expert", "Экспертный"),
                        ],
                        default="beginner",
                        help_text="Уровень сложности программы",
                        max_length=20,
                        verbose_name="Уровень сложности",
                    ),
                ),
                (
                    "is_template",
                    models.BooleanField(
                        default=False,
                        help_text="Программа является шаблоном для создания других программ",
                        verbose_name="Шаблон",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Программа активна и используется",
                        verbose_name="Активна",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Создана"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Обновлена"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="Пользователь, создавший программу",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_curricula",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Создан пользователем",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        help_text="Предмет, к которому относится программа",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="curricula",
                        to="core.subject",
                        verbose_name="Предмет",
                    ),
                ),
            ],
            options={
                "verbose_name": "Учебная программа",
                "verbose_name_plural": "Учебные программы",
                "ordering": ["subject", "name"],
                "unique_together": {("name", "subject", "version")},
            },
        ),
        migrations.CreateModel(
            name="CurriculumNode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Название узла программы (тема, раздел, урок)",
                        max_length=300,
                        verbose_name="Название узла",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Описание содержания узла",
                        verbose_name="Описание",
                    ),
                ),
                (
                    "node_type",
                    models.CharField(
                        choices=[
                            ("module", "Модуль"),
                            ("chapter", "Глава"),
                            ("topic", "Тема"),
                            ("lesson", "Урок"),
                        ],
                        default="lesson",
                        help_text="Тип узла в структуре программы",
                        max_length=20,
                        verbose_name="Тип узла",
                    ),
                ),
                (
                    "estimated_hours",
                    models.PositiveIntegerField(
                        help_text="Количество часов для изучения этого узла",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Планируемые часы",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Порядок изучения среди соседних узлов",
                        verbose_name="Порядок",
                    ),
                ),
                (
                    "is_mandatory",
                    models.BooleanField(
                        default=True,
                        help_text="Узел обязателен для изучения",
                        verbose_name="Обязательный",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Узел активен в программе",
                        verbose_name="Активен",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Создан"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Обновлён"),
                ),
                (
                    "curriculum",
                    models.ForeignKey(
                        help_text="Программа, к которой относится узел",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="nodes",
                        to="learning.curriculum",
                        verbose_name="Учебная программа",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Родительский узел в иерархии программы",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="learning.curriculumnode",
                        verbose_name="Родительский узел",
                    ),
                ),
            ],
            options={
                "verbose_name": "Узел программы",
                "verbose_name_plural": "Узлы программы",
                "ordering": ["curriculum", "order", "name"],
                "unique_together": {("curriculum", "name", "parent")},
            },
        ),
        migrations.CreateModel(
            name="LearningMaterial",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Название учебного материала",
                        max_length=300,
                        verbose_name="Название материала",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Описание содержания материала",
                        verbose_name="Описание",
                    ),
                ),
                (
                    "material_type",
                    models.CharField(
                        choices=[
                            ("document", "Документ"),
                            ("video", "Видео"),
                            ("audio", "Аудио"),
                            ("image", "Изображение"),
                            ("presentation", "Презентация"),
                            ("interactive", "Интерактивный материал"),
                            ("link", "Ссылка"),
                            ("text", "Текстовый материал"),
                        ],
                        help_text="Тип учебного материала",
                        max_length=15,
                        verbose_name="Тип материала",
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        blank=True,
                        help_text="Файл материала",
                        null=True,
                        upload_to="learning_materials/",
                        verbose_name="Файл",
                    ),
                ),
                (
                    "external_url",
                    models.URLField(
                        blank=True,
                        help_text="Ссылка на внешний ресурс",
                        verbose_name="Внешняя ссылка",
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        blank=True,
                        help_text='Текстовое содержание материала (для типа "текст")',
                        verbose_name="Текстовое содержание",
                    ),
                ),
                (
                    "file_size",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Размер файла в байтах",
                        null=True,
                        verbose_name="Размер файла (байты)",
                    ),
                ),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Длительность материала в минутах (для видео/аудио)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(1440),
                        ],
                        verbose_name="Длительность (минуты)",
                    ),
                ),
                (
                    "tags",
                    models.CharField(
                        blank=True,
                        help_text="Теги для поиска и группировки (через запятую)",
                        max_length=500,
                        verbose_name="Теги",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Материал доступен для всех",
                        verbose_name="Публичный",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Создан"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Обновлён"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="Пользователь, создавший материал",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_materials",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Создан пользователем",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        help_text="Предмет, к которому относится материал",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="learning_materials",
                        to="core.subject",
                        verbose_name="Предмет",
                    ),
                ),
            ],
            options={
                "verbose_name": "Учебный материал",
                "verbose_name_plural": "Учебные материалы",
                "ordering": ["subject", "name"],
            },
        ),
        migrations.CreateModel(
            name="LearningMaterialNode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Название узла в структуре материалов",
                        max_length=200,
                        verbose_name="Название узла",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Описание содержания узла",
                        verbose_name="Описание",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Порядок отображения среди соседних узлов",
                        verbose_name="Порядок",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Узел активен и отображается",
                        verbose_name="Активен",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Создан"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Обновлён"),
                ),
                (
                    "materials",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Учебные материалы в этом узле",
                        related_name="nodes",
                        to="learning.learningmaterial",
                        verbose_name="Материалы",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Родительский узел в иерархии",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="learning.learningmaterialnode",
                        verbose_name="Родительский узел",
                    ),
                ),
            ],
            options={
                "verbose_name": "Узел материалов",
                "verbose_name_plural": "Узлы материалов",
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="GroupCourseCurriculum",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="Дата начала изучения программы",
                        verbose_name="Дата начала",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Планируемая дата окончания программы",
                        null=True,
                        verbose_name="Дата окончания",
                    ),
                ),
                (
                    "progress_percentage",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Процент выполнения программы",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Прогресс (%)",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Программа активна для группы",
                        verbose_name="Активна",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Создана"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Обновлена"),
                ),
                (
                    "curriculum",
                    models.ForeignKey(
                        help_text="Учебная программа",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="group_courses",
                        to="learning.curriculum",
                        verbose_name="Учебная программа",
                    ),
                ),
                (
                    "group_course",
                    models.ForeignKey(
                        help_text="Курс группы",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="curricula",
                        to="groups.groupcourse",
                        verbose_name="Курс группы",
                    ),
                ),
            ],
            options={
                "verbose_name": "Программа курса группы",
                "verbose_name_plural": "Программы курсов групп",
                "ordering": ["group_course", "start_date"],
                "unique_together": {("group_course", "curriculum")},
            },
        ),
        migrations.CreateModel(
            name="CurriculumNodeMaterial",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "material_type",
                    models.CharField(
                        choices=[
                            ("required", "Обязательный"),
                            ("recommended", "Рекомендуемый"),
                            ("supplementary", "Дополнительный"),
                            ("assessment", "Контрольный"),
                        ],
                        default="required",
                        help_text="Тип использования материала в узле",
                        max_length=20,
                        verbose_name="Тип материала",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Порядок изучения материала в узле",
                        verbose_name="Порядок",
                    ),
                ),
                (
                    "estimated_time_minutes",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Планируемое время работы с материалом",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(480),
                        ],
                        verbose_name="Планируемое время (минуты)",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Примечания по использованию материала",
                        verbose_name="Примечания",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Создана"),
                ),
                (
                    "curriculum_node",
                    models.ForeignKey(
                        help_text="Узел программы",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="node_materials",
                        to="learning.curriculumnode",
                        verbose_name="Узел программы",
                    ),
                ),
                (
                    "learning_material",
                    models.ForeignKey(
                        help_text="Связанный учебный материал",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="curriculum_links",
                        to="learning.learningmaterial",
                        verbose_name="Учебный материал",
                    ),
                ),
            ],
            options={
                "verbose_name": "Материал узла программы",
                "verbose_name_plural": "Материалы узлов программы",
                "ordering": ["curriculum_node", "order", "material_type"],
                "unique_together": {("curriculum_node", "learning_material")},
            },
        ),
    ]
